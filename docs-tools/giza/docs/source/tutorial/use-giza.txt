=========================
Giza Operations and Tasks
=========================

Overview
--------

Giza provides a large number of operations to support documentation authoring,
production, and deployment. While a ``makefile`` may moderate many
interactions with ``giza``, this document discusses common giza
operations and invocation forms.

Production Operations
---------------------

Sphinx Generation
~~~~~~~~~~~~~~~~~

The following commands will build the ``html`` version of the
resource: ::

   giza sphinx --builder html
   giza sphinx -b html

Replace ``html`` with any Sphinx builder you wish to use. You can
specify a list, space separated, of builders to build multiple formats
at once. For example: ::

   giza sphinx --builder latex dirhtml json html singlehtml epub man

For the MongoDB Manual this is equivalent to the ``make publish``
operation. For projects that have multiple editions, you can specify
the edition as a section option, for example: ::

   giza sphinx --builder latex json html dirhtml singlehtml --edition saas hosted

This is the Giza command to build a Manual with two editions, ``saas``
and ``hosted``, for 5 Sphinx output formats.

Deploying
~~~~~~~~~

There are two targets that deploy built documentation to the
production environment: ``deploy``, which only uploads the
resources; and ``push``, which builds and then deploys the
resources.

Each branch and repository defines its behavior of the deployment in a
*push* config file. These define a number of "push targets" that
describe how to upload the artifacts. When you run a deploy operation, you
specify one or more of these push targets and Giza will deploy the
artifacts specified in the configuration.

``push`` takes arguments that are the combination of the ``sphinx``
command and the ``deploy`` command. Consider the following commands: ::

   giza deploy --target push
   giza deploy --target stage
   giza deploy --target push-saas
   giza deploy --target stage-saas
   giza push --deploy push-saas push-hosted --builder latex json html dirhtml singlehtml --edition saas hosted --language es
   giza push --deploy push-saas push-hosted --builder latex json html dirhtml singlehtml --edition saas hosted

Add the ``--dry-run`` or ``-d`` option to any ``deploy`` command to
avoid actually uploading artifacts during testing.

Git
~~~

Giza provides wrappers for several common ``git`` operations. You can
use Giza to apply the patch from a github pull request or from a
single Github commit: ::

   giza git am -p <object>
   giza git am --patch <object>

Replace ``<object>`` with the ID of a pull request against the
repository that  repository. You can apply any object from github, by
passing a full github URI as the ``<object>``.

All ``giza git`` commands support a ``--branch`` argument that allows
them to perform their operation on a different branch. For example: ::

   giza git am --patch 1066 --branch v4.2
   giza git am -p 1066 -b v4.2

You can also cherry-pick commits from the local repository onto the
current branch: ::
   giza git cp --commits a5b8087
   giza git cp -c a5b8087

The ``git cp`` command allows you to cherry pick a list of commits,
but is most useful in combination with the ``--branch`` option to
apply commits to other branches, as in the following examples: ::

   giza git cp --commits a5b8087 8f9150a 2eb441b
   giza git cp -c a5b8087 8f9150a  2eb441b

   giza git cp --commits a5b8087 8f9150a 2eb441b --branch v0.2
   giza git cp -c a5b8087 8f9150a  2eb441b --branch v0.2

Development Support Operations
------------------------------

Configuration
~~~~~~~~~~~~~

You can use the ``giza config`` command to see a rendered version of
the configuration object used during builds. ``config`` allows you to
see how specifying a language or edition will affect the config
object. For example: ::

   giza config
   giza config --edition saas
   giza config --edition hosted
   giza config --edition saas --language es
   giza config --edition hosted --language fr
   giza config -e saas -l es
   giza config -e hosted -l fr

``generate``
~~~~~~~~~~~~

These operations generate content or fetch data used by the build
without generating the full artifacts. Useful for debugging and
testing. In normal operations the ``sphinx`` operations generate
require inputs, and these operations are not needed.

``generate`` provides the following operations to generate content
directly:

- ``api``
- ``assets``
- ``images``
- ``intersphinx``
- ``redirects``
- ``options``
- ``primer``
- ``steps``
- ``tables``
- ``toc``

``includes``
~~~~~~~~~~~~

The ``includes`` operations introspect the resources' content reuse,
and allow writers to be able to see the dependency relationship
between source files. ``giza includes`` has the following additional
operations:

- ``recursive``: returns a list of all files that also include other
  files.

- ``changes``: returns a list of all files in the repository affected
  indirectly by uncommitted changes to the current repository. (Requires
  `PyGit2 <https://github.com/libgit2/pygit2>`_)

- ``once``: returns a list of all included files that are only used
  once.

- ``unused``: returns a list of all included files that are not used
  at all.

- ``graph``: return a document that maps include files to the
  dependent source files. Includes the ``--filter`` option, which
  allows you to specify a prefix of included files to limit the size
  or scope of the graph.

``package``
~~~~~~~~~~~

Giza provides support for creating "packages" of build artifacts that
you can use to deploy a version of the resource produced on a
different system or at a different time. This makes it possible to
safely deploy a sequence of builds in quick succession. The
``package`` command provides the following options:

- ``create``: Given a *push target*, build ha package of the current
  build output and the current configuration object.

- ``fetch``: Given a URL, download the package to the
  local "build archive." Will refuse to download a package that
  already exists in the build archive.

- ``unwind``: Given a path or URL of a package, extract the package to
  the "public output" directory used for staging.

- ``deploy``: Given a *push target* and the path or URL of a package,
  extract the package and upload those artifacts.
