============================
Giza Setup and Configuration
============================

Overview
--------

Giza is a set of build tools for Documentation sites that use `Sphinx
<http://sphinx-docs.org>`_, and includes a number of additional
content generation and output processing features used to suport
larger scale documentation projects.

This document describes the process for installing, updating, and
managing Giza and its dependencies.

Procedures
----------

All of these procedures assume you have ``pip`` installed.

Set Up ``virtualenv``
~~~~~~~~~~~~~~~~~~~~~

Typically, you will deploy Giza within a virtual
environment. Typically you will want to run the latest version of
Giza, but over time, some older documentation branches may depend on different
Giza environments and using ``virtualenv`` allows you to isolate
versions more clearly.

If you do not have `virtualenvwrapper <https://pypi.python.org/pypi/virtualenvwrapper>`_
installed, install it:

.. code-block:: sh

   pip install virtualenvwrapper

Issue the following command in your shell, *and* append the following
line to your ``~/.zshrc`` or ``~/.bashrc`` file:

.. code-block:: sh

   source /usr/bin/virtualenvwrapper.sh

Create a virtual environment for the latest *released* or *stable*
version of giza:

.. code-block:: sh

   mkvirtualenv giza-release

``mkvirtualenv`` will activate the virtual environment after it
the creation operation finishes. To deactivate a virtual environment
use the ``deactivate`` operation. To re-activate a virtual
environment, use the following operation:

.. code-block:: sh

   workon giza-release

You can have multiple virtual environments and install different
releases of ``giza``, and other Python software, on the same system
without modifying the system packages.

Virtual environments are also useful for working on systems where you
do not have root access.

Install Giza
~~~~~~~~~~~~

To install ``giza`` issue the following command:

.. code-block:: sh

   pip install giza

To install the optional Jira and Github integration, use the following
form:

.. code-block:: sh

   pip install giza \[jira,github\]

To install a specific release of ``giza`` use the following form:

.. code-block:: sh

   pip install giza==0.2.4

``pip`` installs most dependencies for a ``giza`` build. However,
there are few optional or experimental dependencies that you may need
to install depending on your requirements:

- Inkscape. Used to render SVG for use in output. Only required if you
  are building a site that includes image generation. If you're
  running a Linux distribution, install Inkscape using your package
  manager. OS X users should use the `OS X Installer
  <http://www.inkscape.org/en/download/mac-os/>`_.

- PyGit2 (`pygit2 <http://www.pygit2.org/>`_), which is used in
  limited situations to determine which files in the local working
  copy have changed. This dependency is not automatically installed
  because Giza uses ``pygit2`` in very isolated contexts and
  installing ``pygit2`` is more complex than installing other Python
  packages.

Upgrade Giza
~~~~~~~~~~~~

To upgrade an existing Giza install you can either install a specific
version, or you can use the ``--upgrade`` option to ``pip install`` as
in the following example:

.. code-block:: sh

   pip install --upgrade giza

Install Giza for Development
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To simplify the development workflow when adding new Giza features,
you can use a version of ``giza`` that's linked to a check out of your
``mongodb/docs-tools`` repository. You will
use the ``--editable`` option to ``pip install``. Begin by cloning a
copy of the ``mongodb/docs-tools`` repository:

.. code-block:: sh

   cd ~/
   git clone git@github.com:mongodb/docs-tools.git

Create a new development virtual environment:

.. code-block:: sh

   mkvirutalenv giza-development

Install the ``giza`` package:

.. code-block:: sh

   cd ~/docs-tools/giza/
   pip install -e . \[github,jira\]

If you have a checkout of a documentation site, like the MongoDB
documentation, you can create a link to your local ``docs-tools``
repository within the ``build`` directory, if you want to test changes
to themes or other aspects of the system. Issue the following sequence
of commands to get the ``docs`` repository set up. If you have a
``docs`` repository set up skip the next step:

.. code-block:: sh

   cd ~/
   git clone git@github.com:mongodb/docs.git docs-mongodb
   mkdir ~/docs-mongodb/build/

Now create a symbolic:

.. code-block:: sh

   cd ~/docs-mongodb/build/
   ln -s ../../docs-tools

Starting to Use Giza
~~~~~~~~~~~~~~~~~~~~

The ``giza quickstart`` command sets up a documentation repository or
prepares an existing documentation repository for use. ``quickstart``
is non-destructive, and builds the ``html`` Sphinx target for existing
repositories as an initial test.
